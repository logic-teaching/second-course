<style>
table {
  border-collapse: collapse;
  width: 100%;
}

th, td {
  text-align: left;
  padding: 8px;
}

tr:nth-child(even) {background-color: #f2f2f2;}
</style>

<br>

# Chapter 8, Practice Problems, with solutions

We practice with problems in classical logic.

- [General remarks about proof checkers and classical proofs](#general-remarks-about-proof-checkers-and-classical-proofs)
- [Summary of rules](#summary-of-rules)
- [Problems with no quantifiers](#problems-with-no-quantifiers)
- [Problems with just equivalences](#problems-with-just-equivalences)
- [Problems with tautologies and disjunctive syllogism](#problems-with-tautologies-and-disjunctive-syllogism)
- [Problems with identity](#problems-with-identity)

<br>

## General remarks about proof checkers and classical proofs

In future logic courses, and in all future applications of logic, you will be expected to do proofs like those in this practice problem set *without a proof-checker*, and in a setting where *many many* steps can be skipped, and where often justifications are simply omitted since they are regarded as obvious. It is hard to say apriori how many steps can be skipped in more advanced settings: in those settings, you just have to follow the examples set by the textbooks and the instructor and the relevant literature.  The use of a proof-checker in a course like this is designed to give you some instant feedback, and working with it is a way to ensure that you could, in principle, write out all the steps.

Except for very simple problems, it is still advisable to sketch out by hand, at least in outline, the proof before you turn to the proof-checker. In classical logic the role of doing it by hand has a slightly different purpose than in intuitionistic logic. In intuitionistic logic, there are a lot of subproofs (i.e. brackets, and brackets within brackets), and each rule is keyed to a connective, and so writing it out serves to hone your attention in on the connectives and make plain that the aim is to "meet in the middle." In classical logic, there are in general fewer subproofs, in part because we have added the most frequently used "subproof routines" in as rules (e.g. the disjunctive syllogisms and DeMorgan), and looking at the connectives is no longer a particularly reliable guide as to which rule to apply.

Each of the problems comes with a hint about what rules to apply. Try to write out by hand, at least in a sketch, how you would deploy those rules in the given setting. E.g. if the hint is to apply positive disjunctive syllogism and there is not a disjunction sitting in a premise, then you know that you will have to prove a disjunction. And outside of disjunction introduction, you know that one way to acquire disjunctions is with some propositional DeMorgan. This is the kind of strategizing one does in these problems in classical predicate logic: the rules now contain a lot of "subproof routines" as primitive rules, and the art and strategy that you delploy is how to put them together.

<br>

## Summary of rules

We [repeat](https://carnap.io/shared/logiclogiclogic/second-course-chapter-08-lesson-01-no-solutions.pandoc#summary-of-rules) for reference a summary of all the additional rules available in our system of classical predicate logic:

<table style="width:100%">
  <tr>
    <th>Rule</th>
    <th>Abbreviation</th>
    <th>Statement</th>
  </tr>
  <tr>
    <td>Law of excluded middle</td>
    <td>`LEM`</td>
    <td>$\phi\vee \neg \phi$</td>
  </tr>
  <tr>
    <td>The law of double-negation</td>
    <td>`DN`</td>
    <td>$\phi$ is equivalent to $\neg \neg \phi$</td>
  </tr>
  <tr>
    <td>Law of non-contradiction</td>
    <td>`LNC`</td>
    <td>$\neg (\phi\wedge \neg \phi)$</td>
  </tr>
 <tr>
    <td>DeMorgan</td>
    <td>`DMSOME`</td>
    <td>$\neg \forall \; x \; \phi(x)$ is equivalent to $\exists \; x \; \neg \phi(x)$</td>
  </tr>
  <tr>
    <td>DeMorgan</td>
    <td>`DMALL`</td>
    <td>$\neg \exists \; x \; \phi(x)$ is equivalent to $\forall \; x \; \neg \phi(x)$</td>
  </tr>
  <tr>
    <td>DeMorgan</td>
    <td>`DMOR`</td>
    <td>$\neg (\phi\wedge \psi)$ is equivalent to $\neg \phi \vee \neg \psi$</td>
  </tr>
  <tr>
    <td>DeMorgan</td>
    <td>`DMAND`</td>
    <td>$\neg (\phi\vee \psi)$ is equivalent to $\neg \phi \wedge \neg \psi$</td>
  </tr>
 <tr>
    <td>(Positive) Disjunctive syllogism</td>
    <td>`PDS`</td>
    <td>$\phi\vee \psi, \neg \phi \vdash \psi$</td>
  </tr>
  <tr>
    <td>(Negative) disjunctive syllogism</td>
    <td>`NDS`</td>
    <td>$\neg (\phi\wedge \psi), \phi \vdash \neg \psi$</td>
  </tr>
  <tr>
    <td>Negated conditionals and conjunctive statements</td>
    <td>`NC`</td>
    <td>$\neg (\phi \rightarrowâ€„\psi)$ is equivalent to $\phi \wedge \neg \psi$</td>
  </tr>
  <tr>
    <td>Conditionals and disjunctive statements</td>
    <td>`DC`</td>
    <td>$\phi\rightarrow \psi$ is equivalent to $\neg \phi \vee \psi$</td>
  </tr>
  <tr>
    <td>Contraposition</td>
    <td>`CP`</td>
    <td>$\phi\rightarrow \psi$ is equivalent to $\neg \psi\rightarrow \neg \phi$</td>
  </tr>
  <tr>
    <td>Modus tollens</td>
    <td>`MT`</td>
    <td>$\phi\rightarrow \psi, \neg \psi \vdash \neg \phi$</td>
  </tr>
  <tr>
    <td>Law of commutativity for conjunction</td>
    <td>`LCC`</td>
    <td>$\phi\wedge \psi$ is equivalent to $\psi\wedge \phi$</td>
  </tr>
  <tr>
    <td>Law of commutativity for disjunction</td>
    <td>`LCD`</td>
    <td>$\phi\vee \psi$ is equivalent to $\psi\vee \phi$</td>
  </tr>
  <tr>
    <td>Law of associativity for conjunction</td>
    <td>`LAC`</td>
    <td> $(\phi\wedge \psi)\wedge \xi$ is equivalent to $\phi\wedge (\psi\wedge \xi)$</td>
  </tr>
  <tr>
    <td>Law of associativity for disjunction</td>
    <td>`LAD`</td>
    <td>$(\phi\vee \psi)\vee \xi$ is equivalent to $\phi\vee (\psi\vee \xi)$</td>
  </tr>
  <tr>
    <td>Law of distribution for conjunction</td>
    <td>`LDC`</td>
    <td>$\phi\wedge (\psi\vee \xi)$ is equivalent to $(\phi\wedge \psi)\vee (\phi\wedge \xi)$</td>
  </tr>
  <tr>
    <td>Law of distribution for disjunction</td>
    <td>`LDD`</td>
    <td>$\phi\vee (\psi\wedge \xi)$ is equivalent to $(\phi\vee \psi)\wedge (\phi\vee \xi)$</td>
  </tr>
 <tr>
    <td>Introduction rule for identity</td>
    <td>`I=`</td>
    <td>$a=a$</td>
  </tr>
  <tr>
    <td>Elimination rule for identity</td>
    <td>`E=`</td>
    <td> $a=b, \phi(a) \vdash \phi(b)$</td>
  </tr>
  <tr>
    <td>Introduction rule for $\iota$</td>
    <td>`Ii`</td>
    <td>$\exists \; x \; (Fx\wedge \forall \; y \; (Fy\rightarrow y=x))\vdash F\iota x Fx$</td>
  </tr>
  <tr>
    <td>Elimination rule for $\iota$</td>
    <td>`Ei`</td>
    <td>$\iota x Fx\neq \iota x \bot \vdash \exists \; x \; (Fx\wedge \forall \; y \; (Fy\rightarrow y=x))$</td>
  </tr>
</table>

<br>

## Problems with no quantifiers

<br>

*Problem 1*.

This first one is just practice applying commutativity of conjunction to a part of the given formula. There is a  proof of this one using commutativity which is a total of two lines.

```{.ProofChecker .GamutNDPlus submission="none"}
08.01 Fa/\(Fb/\Fc)  :|-: Fa/\(Fc/\Fb)
|Fa/\(Fb/\Fc) :assumption
|Fa/\(Fc/\Fb) :LCC1
```

<br>

*Problem 2*.

This next one extends the previous one by adding on an application of associativity and commutativity at the end.

```{.ProofChecker .GamutNDPlus submission="none"}
08.02 Fa/\(Fb/\Fc)  :|-: (Fc/\Fa)/\Fb
|Fa/\(Fb/\Fc) :assumption
|Fa/\(Fc/\Fb) :LCC1
|(Fa/\Fc)/\Fb :LAC2
|(Fc/\Fa)/\Fb :LCC3
```

<br>

*Problem 3*.

This one is a slightly different combination of commutativity and associativity than the previous one.

```{.ProofChecker .GamutNDPlus submission="none"}
08.03 Fa/\((Fb/\Fc)/\Fd)  :|-: (Fb/\Fa)/\(Fd/\Fc)
|Fa/\((Fb/\Fc)/\Fd) :assumption
|Fa/\(Fb/\(Fc/\Fd)) :LAC1
|(Fa/\Fb)/\(Fc/\Fd) :LAC2
|(Fb/\Fa)/\(Fc/\Fd) :LCC3
|(Fb/\Fa)/\(Fd/\Fc) :LCC4
```

<br>

*Problem 4*.

This one is just an application of distribution followed by two applications of commutativity. Don't let the presence of negations throw you-- just view the ~Fa, ~Fb, ~Fc as formulas in and of themselves.

```{.ProofChecker .GamutNDPlus submission="none"}
08.04 ~Fa/\(~Fb\/~Fc) :|-: (~Fb/\~Fa)\/(~Fc/\~Fa)
|~Fa/\(~Fb\/~Fc) :assumption
|(~Fa/\~Fb)\/(~Fa/\~Fc) :LDC1
|(~Fb/\~Fa)\/(~Fa/\~Fc) :LCC2
|(~Fb/\~Fa)\/(~Fc/\~Fa) :LCC3
```

<br>

*Problem 5*.

This one is just like the previous one. Don't let the presence of the arrow distract you-- just start modifying the antecedent just like you did in the previous problem. *This then illustrates that the equivalences in our system can be applied to subformulas as well as to the main formula.*

```{.ProofChecker .GamutNDPlus submission="none"}
08.05 (~Fa/\(~Fb\/~Fc))->Fd :|-: ((~Fb/\~Fa)\/(~Fc/\~Fa))->Fd
|(~Fa/\(~Fb\/~Fc))->Fd :assumption
|((~Fa/\~Fb)\/(~Fa/\~Fc))->Fd :LDC1
|((~Fb/\~Fa)\/(~Fa/\~Fc))->Fd :LCC2
|((~Fb/\~Fa)\/(~Fc/\~Fa))->Fd :LCC3
```

<br>

## Problems with just equivalences

<br>


*Problem 6*

This one is practice with DeMorgan plus a little bit of distribution. Compared to our [earlier](https://carnap.io/shared/logiclogiclogic/second-course-chapter-04-lesson-01.pandoc#demorgan-for-the-quantifiers) by-hand work with DeMorgan, it will seem painfully slow to have to justify each line with the appropriate instance of DeMorgan. The place where you are presently at with DeMorgan on the basis of our earlier work is the place you are trying to get to with all of the rules we have added to our classical logic.

```{.ProofChecker .GamutNDPlus submission="none"}
08.06 ~AxEyAz(~Fx\/(~Gx/\~Hx)) :|-: ExAyEz((Fx/\Gx)\/(Fx/\Hx))
|~AxEyAz(~Fx\/(~Gx/\~Hx)) :assumption
|Ex~EyAz(~Fx\/(~Gx/\~Hx)) :DMSOME1
|ExAy~Az(~Fx\/(~Gx/\~Hx)) :DMALL2
|ExAyEz~(~Fx\/(~Gx/\~Hx)) :DMSOME3
|ExAyEz(~~Fx/\~(~Gx/\~Hx)) :DMAND4
|ExAyEz(Fx/\~(~Gx/\~Hx)) :DN5
|ExAyEz(Fx/\(~~Gx\/~~Hx)) :DMOR6
|ExAyEz(Fx/\(Gx\/~~Hx)) :DN7
|ExAyEz(Fx/\(Gx\/Hx)) :DN8
|ExAyEz((Fx/\Gx)\/(Fx/\Hx)) :LDC9
```

<br>

*Problem 7*

For this one, think about using distribution and DeMorgan. And before you begin, sketch out how the proof of $(\forall \; x \; \phi(x)\wedge \psi(x))\vdash \forall \; x \; \phi(x)$ goes.

```{.ProofChecker .GamutNDPlus submission="none"}
08.07 Ax((Fx/\Gx)\/(Fx/\Hx)), AxFx->~AxEyRxy  :|-: ExAy~Rxy
|Ax((Fx/\Gx)\/(Fx/\Hx)) :assumption
|AxFx->~AxEyRxy :assumption
|Ax(Fx/\(Gx\/Hx)) :LDC1
|Fc/\(Gc\/Hc) :EA3
|Fc :E/\4
|AxFx :IA5
|~AxEyRxy :E->2,6
|Ex~EyRxy :DMSOME7
|ExAy~Rxy :DMALL8
```

<br>

*Problem 8*

For this one, think about using some double-negation and DeMorgan and associativity. Before you begin, sketch out how the proof of $\exists \; x \; \phi(x)\vdash \exists \; x \; \exists \; y \; (\phi(x)\vee \phi(y))$ goes.


```{.ProofChecker .GamutNDPlus submission="none"}
08.08 ~~ExFx, ExEy(Fx\/Fy)->(Ga/\(~~Gb/\Gc)) :|-: (Ga/\Gb)/\Gc
|~~ExFx :assumption
|ExEy(Fx\/Fy)->(Ga/\(~~Gb/\Gc)) :assumption
|ExFx :DN1
| Fd :assumption
| Fd\/Fe :I\/4
| Ey(Fd\/Fy) :IE5
| ExEy(Fx\/Fy) :IE6
|Fd->ExEy(Fx\/Fy) :I->4-7
|ExEy(Fx\/Fy) :EE3,8
|Ga/\(~~Gb/\Gc) :E->2,9
|Ga/\(Gb/\Gc) :DN10
|(Ga/\Gb)/\Gc :LAC11
```

<br>

*Problem 9*

For this one, try to start out with some elimination of universal, turn to introduction of conjunction, and then think about the other distribution rule, and try to finish it off with some introduction of existential. There's some commutativity of disjunction that gets deployed in the middle of the proof as well.

```{.ProofChecker .GamutNDPlus submission="none"}
08.09 AxFx, (Fa/\(Fb/\Fc))->((Ga\/Gb)/\(Gc\/Ga)) :|-:ExEyEz(Gx\/(Gy/\Gz))
|AxFx :assumption
|(Fa/\(Fb/\Fc))->((Ga\/Gb)/\(Gc\/Ga)) :assumption
|Fa :EA1
|Fb :EA1
|Fc :EA1
|Fb/\Fc :I/\4,5
|Fa/\(Fb/\Fc) :I/\3,6
|(Ga\/Gb)/\(Gc\/Ga) :E->2,7
|(Ga\/Gb)/\(Ga\/Gc) :LCD8
|Ga\/(Gb/\Gc) :LDD9
|Ez(Ga\/(Gb/\Gz)) :IE10
|EyEz(Ga\/(Gy/\Gz)) :IE11
|ExEyEz(Gx\/(Gy/\Gz)) :IE12
```

<br>

*Problem 10*

Despite having a lot of quantifiers in it, this one can be done without using the rules for the quantifiers. Rather, one can just use DeMorgan together with distribution.

```{.ProofChecker .GamutNDPlus submission="none"}
08.10 ~ExEyEz(Gx\/(Gy/\Gz)) :|-: AxAyAz(~(Gx\/Gy)\/~(Gx\/Gz))
|~ExEyEz(Gx\/(Gy/\Gz)) :assumption
|Ax~EyEz(Gx\/(Gy/\Gz)) :DMALL1
|AxAy~Ez(Gx\/(Gy/\Gz)) :DMALL2
|AxAyAz~(Gx\/(Gy/\Gz)) :DMALL3
|AxAyAz(~Gx/\~(Gy/\Gz)) :DMAND4
|AxAyAz(~Gx/\(~Gy\/~Gz)) :DMOR5
|AxAyAz((~Gx/\~Gy)\/(~Gx/\~Gz)) :LDC6
|AxAyAz(~(Gx\/Gy)\/(~Gx/\~Gz)) :DMAND7
|AxAyAz(~(Gx\/Gy)\/~(Gx\/Gz)) :DMAND8
```

<br>



<br>

## Problems with tautologies and disjunctive syllogism

<br>

*Problem 11*

This one is practice with DeMorgan and positive disjunctive syllogism. The last part of it is an exercise in existential elimination. For this part, consider sketching out the proof of $\exists \; y \; Say, \forall \; x \; \forall \; y \; (Sxy\rightarrow Rxc)\vdash Rac$ before beginning.

```{.ProofChecker .GamutNDPlus submission="none"}
08.11 AxEyRxy\/AxEySxy, ExAy~Rxy, AxAy(Sxy->Rxc) :|-: Rac
|AxEyRxy\/AxEySxy :assumption
|ExAy~Rxy :assumption
|AxAy(Sxy->Rxc) :assumption
|Ex~EyRxy :DMALL2
|~AxEyRxy :DMSOME4
|AxEySxy :PDS1,5
|EySay :EA6
| Sab :assumption
| Ay(Say->Rac) :EA3
| Sab->Rac :EA9
| Rac :E->8,10
|Sab->Rac :I->8-11
|Rac :EE7,12
```

<br>

*Problem 12*

This one begins with a negative disjunctive syllogism, and then one has to end with an existential elimination. For this last part, consider sketching out the proof of $\exists \; y \; (Fb\vee Rby), \neg Fb \vdash \exists \; y \; Rby$ first; note that the bracket will require another disjunctive syllogism.

```{.ProofChecker .GamutNDPlus submission="none"}
08.12 ~(Fa/\ExAy~(Fx\/Rxy)), Fa, ~Fb :|-: EyRby
|~(Fa/\ExAy~(Fx\/Rxy)) :assumption
|Fa :assumption
|~Fb :assumption
|~ExAy~(Fx\/Rxy) :NDS 1,2
|Ax~Ay~(Fx\/Rxy) :DMALL4
|AxEy~~(Fx\/Rxy) :DMSOME5
|AxEy(Fx\/Rxy) :DN6
|Ey(Fb\/Rby) :EA7
| Fb\/Rbc :assumption
| Rbc :PDS3,9
| EyRby :IE10
|(Fb\/Rbc)->EyRby :I->9-11
|EyRby :EE8,12
```

<br>

*Problem 13*

For this one use law of excluded middle and DeMorgan to get the antecedent of the first assumption. Then wrap it up with some modus tollens.

```{.ProofChecker .GamutNDPlus submission="none"}
08.13 (Ax(~Fx\/~Gx)\/Ex(Fx/\Gx))->(Fa->Fb), ~Fb :|-: ~Fa
|(Ax(~Fx\/~Gx)\/Ex(Fx/\Gx))->(Fa->Fb) :assumption
|~Fb :assumption
|Ex(Fx/\Gx)\/~Ex(Fx/\Gx) :LEM
|Ex(Fx/\Gx)\/Ax~(Fx/\Gx) :DMALL3
|Ex(Fx/\Gx)\/Ax(~Fx\/~Gx) :DMOR4
|Ax(~Fx\/~Gx)\/Ex(Fx/\Gx) :LCD5
|Fa->Fb :E->1,6
|~Fa :MT2,7
```

<br>

*Problem 14*

For this one, try some repeated modus tollens and then positive disjunctive syllogism.

```{.ProofChecker .GamutNDPlus submission="none"}
08.14 Raa->Rbb, Rbb->Rcc, Rcc->Rdd, ~Rdd, AxRxx\/AxSxx:|-: Saa
|Raa->Rbb :assumption
|Rbb->Rcc :assumption
|Rcc->Rdd :assumption
|~Rdd :assumption
|AxRxx\/AxSxx :assumption
|~Rcc :MT3,4
|~Rbb :MT2,6
|~Raa :MT1,7
|Ex~Rxx :IE8
|~AxRxx :DMSOME9
|AxSxx :PDS5,10
|Saa :EA11
```


<br>

*Problem 15*

For this one, just use the principle of non-contradiction to get the antecedent.

```{.ProofChecker .GamutNDPlus submission="none"}
08.15 AxAy(~(Rxx/\~Rxx)->Ryy) :|-: AyRyy
|AxAy(~(Rxx/\~Rxx)->Ryy) :assumption
|~(Raa/\~Raa) :LNC
|Ay(~(Raa/\~Raa)->Ryy) :EA1
|~(Raa/\~Raa)->Rbb :EA3
|Rbb :E->2,4
|AyRyy :IA5
```

<br>

## Problems with identity

<br>

*Problem 16*

This one involves the elimination rule for identity plus a little disjunction elimination.

```{.ProofChecker .GamutNDPlus submission="none"}
08.16 Fa, Gb, Ax(x=a\/x=b)  :|-: Ax(Fx\/Gx)
|Fa :assumption
|Gb :assumption
|Ax(x=a\/x=b) :assumption
|c=a\/c=b :EA3
| c=a :assumption
| Fc :E=1,5
| Fc\/Gc :I\/6
|c=a->(Fc\/Gc) :I->5-7
| c=b :assumption
| Gc :E=2,9
| Fc\/Gc :I\/10
|c=b->(Fc\/Gc) :I->9-11
|Fc\/Gc :E\/4,8,12
|Ax(Fx\/Gx) :IA13
```

<br>

*Problem 17*

This one involves the introduction rule for identity together with a little distribution `LDC`.

```{.ProofChecker .GamutNDPlus submission="none"}
08.17 AxAy(x=y->(Fx\/Gy))  :|-: AxAy(((Fx\/Gx)/\Fy)\/((Fx\/Gx)/\Gy))
|AxAy(x=y->(Fx\/Gy)) :assumption
|Ay(a=y->(Fa\/Gy)) :EA1
|a=a->(Fa\/Ga) :EA2
|a=a :I=
|Fa\/Ga :E->3,4
|Ay(b=y->(Fb\/Gy)) :EA1
|b=b->(Fb\/Gb) :EA6
|b=b :I=
|Fb\/Gb :E->7,8
|(Fa\/Ga)/\(Fb\/Gb) :I/\5,9
|((Fa\/Ga)/\Fb)\/((Fa\/Ga)/\Gb) :LDC10
|Ay(((Fa\/Ga)/\Fy)\/((Fa\/Ga)/\Gy)) :IA11
|AxAy(((Fx\/Gx)/\Fy)\/((Fx\/Gx)/\Gy)) :IA12
```

<br>

*Problem 18*

Once you unpack a little, the premises of this one tell you that there is exactly one F. Start by isolating those parts to let you introduce "the F".

```{.ProofChecker .GamutNDDesc submission="none"}
08.18 Fa/\Ga, Ay(Fy->y=a) :|-: GixFx
|Fa/\Ga :assumption
|Ay(Fy->y=a) :assumption
|Fa :E/\1
|Fa/\Ay(Fy->y=a) :I/\2,3
|Ex(Fx/\Ay(Fy->y=x)) :IE4
|FixFx :Ii5
|FixFx->ixFx=a :EA2
|ixFx=a :E->6,7
|Ga :E/\1
|GixFx :E=8,9
```

<br>

*Problem 19*

This is just a proof that shows that if "the F" is not "the [insert contradiction]", and if "the F is identical to a", then "Fa".

```{.ProofChecker .GamutNDDesc submission="none"}
08.19 ~ixFx=ixâŠ¥, a=ixFx :|-: Fa
|~ixFx=ixâŠ¥ :assumption
|a=ixFx :assumption
|Ex(Fx/\Ay(Fy->y=x)) :Ei1
|FixFx :Ii3
|Fa :E=2,4
```

<br>

*Problem 20*

For this one, you should be able to take your proof of the previous and simply replace `Fx` by `Fx/\Gx`. While mechanical, there will be some steps in this simple proof that become challenging to parse.

```{.ProofChecker .GamutNDDesc submission="none"}
08.20 ~ix(Fx/\Gx)=ixâŠ¥, a=ix(Fx/\Gx) :|-: Fa/\Ga
|~ix(Fx/\Gx)=ixâŠ¥ :assumption
|a=ix(Fx/\Gx) :assumption
|Ex((Fx/\Gx)/\Ay((Fy/\Gy)->y=x)) :Ei1
|Fix(Fx/\Gx)/\Gix(Fx/\Gx) :Ii3
|Fa/\Ga :E=2,4
```
