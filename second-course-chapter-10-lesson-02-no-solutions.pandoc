<style>
table {
  border-collapse: collapse;
  width: 100%;
}

th, td {
  text-align: left;
  padding: 8px;
}

tr:nth-child(even) {background-color: #f2f2f2;}
</style>

<br>

# Chapter 10, Lesson 2, Review


We review the previous chapters

- [Famous Proofs](#famous-proofs)
- [Proof or countermodel](#proof-or-countermodel)
- [Chapter 6 problems](#chapter-6-problems)
- [Chapter 7 problems](#chapter-7-problems)
- [Chapter 8 problems](#chapter-8-problems)
- [Chapter 9 problems](#chapter-9-problems)
- [Summary of rules of classical predicate logic](#summary-of-rules-of-classical-predicate-logic)


<p style="page-break-before: always">

## Famous proofs

<br>

*Problem 1*

This is the famous proof that intuitionistic logic proves the one validity among the basic statements formed from a single binary relation and two distinct quantifiers (see [Chapter 7 Practice Problems](https://carnap.io/shared/logiclogiclogic/second-course-chapter-07-problems-with-solutions.pandoc) Problem 5).

For this problem, use only the introduction and elimination rules, along with ex falso and repeat rule. That is, this proof is a proof in intuitionistic predicate logic.

```{.ProofChecker .GamutNDPlus submission="none" }
10.01 EyAx~Rxy  :|-: AxEy~Rxy
|EyAx~Rxy :assumption
```

<br>


<p style="page-break-before: always">


*Problem 2*

This is the famous proof that classical logic proves the hard part of DeMorgan. (From [Chapter 8, Lesson 1](https://carnap.io/shared/logiclogiclogic/second-course-chapter-08-lesson-01-with-solutions.pandoc) Example 1).

For this problem, use only the introduction and elimination rules, along with ex falso and repeat rule, as well as *double-negation*.

```{.ProofChecker .GamutNDPlus submission="none"}
10.02 ~AxTbx  :|-: Ex~Tbx
|~AxTbx :assumption
```


<br>

<p style="page-break-before: always">

## Proof or countermodel

<br>

*Problem 3*

```{.ProofChecker .GamutNDPlus submission="none"}
10.03 Ex(Fx/\Gx), Ax(Fx->Hx),Ax(Gx->(Kx/\Jx)) :|-: Ex(Hx/\Kx)
|Ex(Fx/\Gx) :assumption
|Ax(Fx->Hx) :assumption
|Ax(Gx->(Kx/\Jx)) :assumption
```

<br>

<br>


```{.CounterModeler .Validity system="gamutND" submission="none" options="negated-double-turnstile"}
10.03 Ex(Fx/\Gx), Ax(Fx->Hx),Ax(Gx->(Kx/\Jx)) :|-: Ex(Hx/\Kx)
|Domain:
|F(_):
|G(_):
|H(_):
|K(_):
|J(_):
```

<br>

<p style="page-break-before: always">

*Problem 4*

The first three axioms are the axioms of [equivalence relations](https://carnap.io/shared/logiclogiclogic/second-course-chapter-04-problems-yet-more-with-solutions.pandoc#validity-and-invalidity-with-orders-and-equivalence-relations).

```{.ProofChecker .GamutNDPlus submission="none"}
10.04 AxRxx, AxAy(Rxy->Ryx), AxAyAz((Rxy/\Ryz)->Rxz), Rab, ~Rbc :|-: ~Rac
|AxRxx :assumption
|AxAy(Rxy->Ryx) :assumption
|AxAyAz((Rxy/\Ryz)->Rxz) :assumption
|Rab :assumption
|~Rbc :assumption
```

```{.CounterModeler .Validity system="gamutND" submission="none" options="negated-double-turnstile"}
10.04 AxRxx, AxAy(Rxy->Ryx), AxAyAz((Rxy/\Ryz)->Rxz), Rab, ~Rbc :|-: ~Rac
|Domain:
|R(_,_):
|a:
|b:
|c:
```



<br>

<p style="page-break-before: always">

*Problem 5*


This one is an exercise with the Russellian and Fregean translations of the definite descriptions.

<br>

```{.ProofChecker .GamutNDDesc submission="none"}
10.05 ~FixGx, Ex(Gx/\Ay(Gy->y=x)) :|-: Ez(~Fz/\Gz)
|~FixGx :assumption
|Ex(Gx/\Ay(Gy->y=x)) :assumption
```

<br>

<br>


```{.CounterModeler .Validity system="gamutNDDesc" submission="none" options="negated-double-turnstile"}
10.05 ~FixGx, Ex(Gx/\Ay(Gy->y=x)) :|-: Ez(~Fz/\Gz)
|Domain:
|F(_):
|G(_):
```

<br>

<p style="page-break-before: always">

*Problem 6*

<br>

The first four axioms are the axioms of [linear orders](https://carnap.io/shared/logiclogiclogic/second-course-chapter-04-problems-yet-more-with-solutions.pandoc#validity-and-invalidity-with-orders-and-equivalence-relations). These are axioms that describe $\leq$ on the natural numbers, integers, and rationals. The linearity axiom (the fourth axiom) says that given $x,y$ one either has $x\leq y$ or $y\leq x$ or $x=y$. Use your intuitions about lines to guide yourself through the problem.

```{.ProofChecker .GamutNDPlus submission="none"}
10.06 AxRxx, AxAy((Rxy/\Ryx)->x=y), AxAyAz((Rxy/\Ryz)->Rxz), AxAy((Rxy\/Ryx)\/x=y), Rab, Rbc, ~a=b, ~b=c, ~a=c :|-: Ax(Rxc->(Rxb\/x=b))
|AxRxx :assumption
|AxAy((Rxy/\Ryx)->x=y) :assumption
|AxAyAz((Rxy/\Ryz)->Rxz) :assumption
|AxAy((Rxy\/Ryx)\/x=y) :assumption
|Rab :assumption
|Rbc :assumption
|~a=b :assumption
|~b=c :assumption
|~a=c :assumption
```

```{.CounterModeler .Validity system="gamutND" submission="none" options="negated-double-turnstile"}
10.06 AxRxx, AxAy((Rxy/\Ryx)->x=y), AxAyAz((Rxy/\Ryz)->Rxz), AxAy((Rxy\/Ryx)\/x=y), Rab, Rbc, ~a=b, ~b=c, ~a=c :|-: Ax(Rxc->(Rxb\/x=b))
|Domain:
|R(_,_):
|a:
|b:
|c:
```

<br>

<p style="page-break-before: always">

## Chapter 6 problems

<br>

For these problems, use only the introduction and elimination rules, along with ex falso and repeat rule. That is, these proofs are proofs in intuitionistic predicate logic.

<br>

*Problem 7*

This problem illustrates both how to permute hypotheses in nested conditionals, and how one can always strengthen an antecedent.


```{.ProofChecker .GamutNDPlus submission="none" }
10.07 Fa->(Rab->~Fc) :|-: AxRxb->(Fa->~Fc)
|Fa->(Rab->~Fc) :assumption
```


<br>

<p style="page-break-before: always">

*Problem 8*

Prove the following in intuitionistic logic, i.e. using only the introduction and elimination rule, plus ex falso and repeat. (This is an instance of the second Conversion).


```{.ProofChecker .GamutNDPlus submission="none"}
10.08 ~Ex(Hx/\~Gx)  :|-: ~Ex(~Gx/\Hx)
|~Ex(Hx/\~Gx) :assumption
```

<br>

<p style="page-break-before: always">

## Chapter 7 problems

<br>

*Problem 9*

For this problem, use only the introduction and elimination rules, along with ex falso and repeat rule. That is, this proof is a proof in intuitionistic predicate logic.

This problem is an exercise in ex falso.

```{.ProofChecker .GamutNDPlus submission="none"}
10.09 ~Fa :|-: ~~(Fa->Fb)
|~Fa :assumption
```

<br>

<p style="page-break-before: always">

*Problem 10*

Consider the following proof in the implicational fragment of intuitionistic propositional logic, which is just a fancy way of saying that if you derive $s$ from $p,q,r$ then you can derive $s$ from $q,r,p$

```{.ProofChecker .GamutMPND submission="none"}
 :|-: (p->(q->(r->s)))->(q->(r->(p->s)))
| p->(q->(r->s)) :assumption
|  q :assumption
|   r :assumption
|    p :assumption
|    q->(r->s) :E->1,4
|    r->s :E->2,5
|    s :E->6,3
|   p->s :I->4-7
|  r->(p->s) :I->3-8
| q->(r->(p->s)) :I->2-9
|(p->(q->(r->s)))->(q->(r->(p->s))) :I->1-10
```

<br>

Suppose that you decorate the first four assumptions with $f:p\rightarrow (q\rightarrow (r\rightarrow s))$ and $u:q$ and $v:r$ and $w:p$. After decorating the rest of the proof, what lambda term do you get? *Hint*: you may need to recopy the above proof and add the lambda terms as you go. There are some extra blank pages below which give you space to do that. The introduction and elimination rules for arrow in the lambda calculus are also recopied for reference in the next pages. *Hint*: after getting your answer by decorating, you can "check it" by making sure that the inputs match the domains of the functions in question.

```{.QualitativeProblem .MultipleChoice options="check" submission="none"}
10.10 After decorating the rest of the proof, what lambda term do you get on the last line?
| λf:p->(q->(r->s)) λu:q λv:r λw:p . ( ( f(v) ) u ) w
| λf:p->(q->(r->s)) λu:q λv:r λw:p . ( ( f(u) ) v ) w
|* λf:p->(q->(r->s)) λu:q λv:r λw:p . ( ( f(w) ) u ) v
| λf:p->(q->(r->s)) λu:q λv:r λw:p . ( ( f(w) ) v ) u
```


<br>

<p style="page-break-before: always">

[extra page for scratch work for previous problem]



<p style="page-break-before: always">

This page is *merely* for reference, and includes the introduction and elimination rules for arrow for our lambda calculus:

Elimination rules for arrow:

- *Lambda calculus*: If $M:P\rightarrow Q$ and $N:P$, then $MN:Q$.

- *Logic*: If $P\rightarrow Q$ and $P$, then $Q$.

We can write these two rules side by side in our more familiar proof format as follows:

&nbsp; &nbsp; &nbsp;  <img src="https://logic-teaching.github.io/philos-132-winter-23/texts/lambda-calculus-elim-rules-2.png" alt="Elimination rules" width="800"/>

<br>

Introduction rules for arrow:

- *Lambda calculus*: If from $x:P$ it follows that $M: Q$, then $\lambda x : P .\; M\; : P\rightarrow Q$

- *Logic*: If from $P$ it follows that $Q$, then $P\rightarrow Q$.

We can write these two rules side by side in our more familiar proof format as follows:

&nbsp; &nbsp; &nbsp;  <img src="https://logic-teaching.github.io/philos-132-winter-23/texts/lambda-calculus-intro-rules-2.png" alt="Elimination rules" width="800"/>

<p style="page-break-before: always">

<br>

<p style="page-break-before: always">

## Chapter 8 problems

<br>

For these problems, one can use any of the rules of classical predicate logic. See [Summary of rules of classical predicate logic](#summary-of-rules-of-classical-predicate-logic) for reference.

<br>

*Problem 11*

This argument is unprovable in intuitionistic logic. Hence you definitely need to use something besides the introduction and elimination rules. One classical proof starts out with some `DC`, and `DMAND3`, and then finishes off with a disjunction elimination. There's also an obvious opportunity to apply `DN`, although people may differ on what step they want to apply it on.

```{.ProofChecker .GamutNDPlus submission="none"}
10.11 (Fa->Fb)->(Fa\/~Fb) :|-: ~~Fa\/~Fb
|(Fa->Fb)->(Fa\/~Fb) :assumption
```

<br>

<p style="page-break-before: always">

*Problem 12*

Give a resolution proof of

$\neg Fa\rightarrow (Fb\vee Fc), \forall \; x \; (Fx\rightarrow (Gx\vee Hx)), \neg Gb, \neg Gc, \neg Hb, \neg Hc \vdash Ga\vee Ha$

<br>

<p style="page-break-before: always">

## Chapter 9 problems

<br>

*Problem 13*

This problem has two parts, where we use the key:

| F = French major
| H = happy
| T = trusts

~~~{.Translate .FOL system="gamutND" submission="none"}
10.13.1 ExEy(((Fx/\Hx)/\(Fy/\Hy))/\Txy) : Some happy French major trusts some happy French major.
|
~~~

<br>

<br>

<br>


<br>

~~~{.Translate .Exact system="gamutNDSOL" submission="none"}
10.13.2 EX1(Ax(X1x->(Fx/\Hx))/\AxAy((X1x/\X1y)->Txy)) : Some happy French majors trust one another
|
~~~

*Hint*: the intended reading is that are some happy French majors such that any pair $x,y$ among these persons is such that $x$ trusts $y$.

<br>

<p style="page-break-before: always">

*Problem 14*

This is a problem in the deductive system for second-order logic. For reference, we recopy the rules  on the next page.

This is practice with with `IE1` (that is, introduction of existential for properties). Note that there is `1` at the end of `IE1` to indicate that we are concerned with one-place properties. Hence, the justifications will look like `:IE1 n`, where `n` is the line number. That is, note that there are now two numbers showing up in the justifications. This problem is very much like Problem 13 Part 1 from the [Chapter 9 More Practice Problems document](https://carnap.io/shared/logiclogiclogic/second-course-chapter-09-problems-yet-more-with-solutions.pandoc#second-order-logic).

```{.ProofChecker .GamutNDSOL submission="none"}
10.14 Fa\/Gb :|-: EX1EY1(X1a\/Y1b)
|Fa\/Gb :assumption
```

<p style="page-break-before: always">

These are the rules for our second-order deductive system. They are included only for reference.

<table style="width:125%">
  <tr>
    <th>Name</th>
    <th>Rule</th>
    <th>Rule, typed</th>
    <th>Abbreviation</th>
  </tr>
  <tr>
    <td>Application</td>
    <td>$\lambda x. [ϕ(x)]a \vdash ϕ(a)$</td>
    <td>`\x[ϕ(x)]a ⊢ ϕ(a)` or `λx[ϕ(x)]a ⊢ ϕ(a)` </td>
    <td>`APP1`</td>
  </tr>
  <tr>
    <td>Abstraction</td>
    <td>$ϕ(a) \vdash \lambda x. [ϕ(x)]a$</td>
    <td>`ϕ(a) ⊢ \x[ϕ(x)]a` or `ϕ(a) ⊢ λx[ϕ(x)]a` </td>
    <td>`ABS1`</td>
  </tr>
  <tr>
    <td>Introduction of second-order existential</td>
    <td>$\psi(\lambda x. [ϕ(x)]) \ldots \vdash \exists \; X \; \psi(X)$</td>
    <td>`ψ(\x[ϕ(x)]) ⊢ EX1 ψ(X1)` or `ψ(λx[ϕ(x)]) ⊢ EX1 ψ(X1)` </td>
    <td>`IE1`</td>
  </tr>
  <tr>
    <td></td>
    <td></td>
    <td>or `ψ(λx[ϕ(x)]) ⊢ EX1 ψ(X1)` </td>
    <td>
  </tr>
  <tr>
    <td>Elimination of second-order universal</td>
    <td>$\forall \; X \; \psi(X) \vdash \psi(\lambda x. [ϕ(x)])$</td>
    <td>`AX1 ψ(X1) ⊢ ψ(\x[ϕ(x)])` or `AX1 ψ(X1) ⊢ ψ(λx[ϕ(x)])` </td>
    <td>`EA1`</td>
  </tr>
  <tr>
    <td></td>
    <td></td>
    <td>or `AX1 ψ(X1) ⊢ ψ(λx[ϕ(x)])` </td>
    <td></td>
  </tr>
  <tr>
    <td>Introduction of second-order universal</td>
    <td>$\psi(Y) \vdash \forall \; X \; \psi(X)$</td>
    <td>`ψ(Y1) ⊢ AX1 ψ(X1)` </td>
    <td>`IA1`</td>
  </tr>
  <tr>
    <td>Elimination of second-order existential</td>
    <td>$\exists \; X \; \psi(X), \psi(Y)\rightarrow \xi \vdash \xi$</td>
    <td>`EX1 ψ(X1), ψ(Y1)->ξ ⊢ ξ` </td>
    <td>`EE1`</td>
  </tr>
</table>

<br>

<p style="page-break-before: always">

[blank page for scratch work]

<p style="page-break-before: always">

[blank page for scratch work]

<p style="page-break-before: always">

<p style="page-break-before: always">

[blank page for scratch work]

<p style="page-break-before: always">

[blank page for scratch work]

<br>

<p style="page-break-before: always">

## Summary of rules of classical predicate logic

For reference, here is a summary of all the rules available in our system of classical predicate logic, i.e. the Chapter 8 system.

<table style="width:100%">
  <tr>
    <th>Rule</th>
    <th>Abbreviation</th>
    <th>Statement</th>
  </tr>
  <tr>
    <td>Law of excluded middle</td>
    <td>`LEM`</td>
    <td>$\phi\vee \neg \phi$</td>
  </tr>
  <tr>
    <td>The law of double-negation</td>
    <td>`DN`</td>
    <td>$\phi$ is equivalent to $\neg \neg \phi$</td>
  </tr>
  <tr>
    <td>Law of non-contradiction</td>
    <td>`LNC`</td>
    <td>$\neg (\phi\wedge \neg \phi)$</td>
  </tr>
 <tr>
    <td>DeMorgan</td>
    <td>`DMSOME`</td>
    <td>$\neg \forall \; x \; \phi(x)$ is equivalent to $\exists \; x \; \neg \phi(x)$</td>
  </tr>
  <tr>
    <td>DeMorgan</td>
    <td>`DMALL`</td>
    <td>$\neg \exists \; x \; \phi(x)$ is equivalent to $\forall \; x \; \neg \phi(x)$</td>
  </tr>
  <tr>
    <td>DeMorgan</td>
    <td>`DMOR`</td>
    <td>$\neg (\phi\wedge \psi)$ is equivalent to $\neg \phi \vee \neg \psi$</td>
  </tr>
  <tr>
    <td>DeMorgan</td>
    <td>`DMAND`</td>
    <td>$\neg (\phi\vee \psi)$ is equivalent to $\neg \phi \wedge \neg \psi$</td>
  </tr>
 <tr>
    <td>(Positive) Disjunctive syllogism</td>
    <td>`PDS`</td>
    <td>$\phi\vee \psi, \neg \phi \vdash \psi$</td>
  </tr>
  <tr>
    <td>(Negative) disjunctive syllogism</td>
    <td>`NDS`</td>
    <td>$\neg (\phi\wedge \psi), \phi \vdash \neg \psi$</td>
  </tr>
  <tr>
    <td>Negated conditionals and conjunctive statements</td>
    <td>`NC`</td>
    <td>$\neg (\phi \rightarrow \psi)$ is equivalent to $\phi \wedge \neg \psi$</td>
  </tr>
  <tr>
    <td>Conditionals and disjunctive statements</td>
    <td>`DC`</td>
    <td>$\phi\rightarrow \psi$ is equivalent to $\neg \phi \vee \psi$</td>
  </tr>
  <tr>
    <td>Contraposition</td>
    <td>`CP`</td>
    <td>$\phi\rightarrow \psi$ is equivalent to $\neg \psi\rightarrow \neg \phi$</td>
  </tr>
  <tr>
    <td>Modus tollens</td>
    <td>`MT`</td>
    <td>$\phi\rightarrow \psi, \neg \psi \vdash \neg \phi$</td>
  </tr>
  <tr>
    <td>Law of commutativity for conjunction</td>
    <td>`LCC`</td>
    <td>$\phi\wedge \psi$ is equivalent to $\psi\wedge \phi$</td>
  </tr>
  <tr>
    <td>Law of commutativity for disjunction</td>
    <td>`LCD`</td>
    <td>$\phi\vee \psi$ is equivalent to $\psi\vee \phi$</td>
  </tr>
  <tr>
    <td>Law of associativity for conjunction</td>
    <td>`LAC`</td>
    <td> $(\phi\wedge \psi)\wedge \xi$ is equivalent to $\phi\wedge (\psi\wedge \xi)$</td>
  </tr>
  <tr>
    <td>Law of associativity for disjunction</td>
    <td>`LAD`</td>
    <td>$(\phi\vee \psi)\vee \xi$ is equivalent to $\phi\vee (\psi\vee \xi)$</td>
  </tr>
  <tr>
    <td>Law of distribution for conjunction</td>
    <td>`LDC`</td>
    <td>$\phi\wedge (\psi\vee \xi)$ is equivalent to $(\phi\wedge \psi)\vee (\phi\wedge \xi)$</td>
  </tr>
  <tr>
    <td>Law of distribution for disjunction</td>
    <td>`LDD`</td>
    <td>$\phi\vee (\psi\wedge \xi)$ is equivalent to $(\phi\vee \psi)\wedge (\phi\vee \xi)$</td>
  </tr>
 <tr>
    <td>Introduction rule for identity</td>
    <td>`I=`</td>
    <td>$a=a$</td>
  </tr>
  <tr>
    <td>Elimination rule for identity</td>
    <td>`E=`</td>
    <td> $a=b, \phi(a) \vdash \phi(b)$</td>
  </tr>
  <tr>
    <td>Introduction rule for $\iota$</td>
    <td>`Ii`</td>
    <td>$\exists \; x \; (Fx\wedge \forall \; y \; (Fy\rightarrow y=x))\vdash F\iota x Fx$</td>
  </tr>
  <tr>
    <td>Elimination rule for $\iota$</td>
    <td>`Ei`</td>
    <td>$\iota x Fx\neq \iota x \bot \vdash \exists \; x \; (Fx\wedge \forall \; y \; (Fy\rightarrow y=x))$</td>
  </tr>
</table>

<br>
