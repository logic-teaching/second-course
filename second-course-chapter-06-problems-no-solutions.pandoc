<style>
table {
  border-collapse: collapse;
  width: 100%;
}

th, td {
  text-align: left;
  padding: 8px;
}

tr:nth-child(even) {background-color: #f2f2f2;}
</style>

<br>
<br>

# Chapter 6, Practice Problems

We practice with the rules learned thus far.

- [Rules learned thus far](#rules-learned-thus-far)
- [Proofs with arrows and nested arrows](#proofs-with-arrows-and-nested-arrows)
- [Proofs with combinations of universals and conjunctions](#proofs-with-combinations-of-universals-and-conjunctions)
- [Proofs with negations](#proofs-with-negations)
- [Proofs with nested arrows with universals and negations](#proofs-with-nested-arrows-and-universals-and-negations)

<p style="page-break-before: always">

<br>


## Rules learned thus far

<br>

<table style="width:120%">
  <tr>
    <th>Name</th>
    <th>Typed</th>
    <th>Discussion</th>
    <th># of Prior Lines</th>
  </tr>
  <tr>
    <td>Introduction of universal</td>
    <td>`I∀` or `IA`</td>
    <td>[Discussion](https://carnap.io/shared/logiclogiclogic/second-course-chapter-06-lesson-01-with-solutions.pandoc#introduction-rule-for-universal)</td>
    <td>1</td>
  </tr>
  <tr>
    <td>Elimination of universal</td>
    <td>`E∀` or `EA`</td>
    <td>[Discussion](https://carnap.io/shared/logiclogiclogic/second-course-chapter-06-lesson-01-with-solutions.pandoc#elimination-rule-for-universal)</td>
    <td>1</td>
  </tr>
  <tr>
    <td>Introduction of conjunction</td>
    <td>`I∧` or `I/\`</td>
    <td>[Discussion](https://carnap.io/shared/logiclogiclogic/second-course-chapter-06-lesson-01-with-solutions.pandoc#introduction-rule-for-conjunction)</td>
    <td>2</td>
  </tr>
  <tr>
    <td>Elimination of conjunction</td>
    <td>`E∧` or `E/\`</td>
    <td>[Discussion](https://carnap.io/shared/logiclogiclogic/second-course-chapter-06-lesson-01-with-solutions.pandoc#elimination-rule-for-conjunction)</td>
    <td>1</td>
  </tr>
  <tr>
    <td>Introduction of arrow</td>
    <td>`I→` or `I->`</td>
    <td>[Discussion](https://carnap.io/shared/logiclogiclogic/second-course-chapter-06-lesson-01-with-solutions.pandoc#introduction-rule-for-implication)</td>
    <td>$\geq 2$</td>
  </tr>
  <tr>
    <td>Elimination of arrow</td>
    <td>`E→` or `E->`</td>
    <td>[Discussion](https://carnap.io/shared/logiclogiclogic/second-course-chapter-06-lesson-01-with-solutions.pandoc#elimination-rule-for-implication)</td>
    <td>$2$</td>
  </tr>
  <tr>
    <td>Introduction of negation</td>
    <td>`I¬` or `I~`</td>
    <td>[Discussion](https://carnap.io/shared/logiclogiclogic/second-course-chapter-06-lesson-01-with-solutions.pandoc#introduction-rule-for-negation)</td>
    <td>$\geq 2$</td>
  </tr>
  <tr>
    <td>Elimination of negation</td>
    <td>`E¬` or `E~`</td>
    <td>[Discussion](https://carnap.io/shared/logiclogiclogic/second-course-chapter-06-lesson-01-with-solutions.pandoc#elimination-rule-for-negation)</td>
    <td>2</td>
  </tr>
</table>

<br>



## Proofs with arrows and nested arrows

<br>

*Example 1*.

For all proofs, you should be writing them out on paper before typing them up, but particularly whenever one is working with proofs involving arrow introduction. Hence, you should start this one out by writing the the assumption at the top of your page, and writing the conclusion at the bottom of your page. Since the premises don't give you anything to eliminate, look at the main connective of the conclusion and try to introduce it.

```{.ProofChecker .GamutNDPlus submission="none" }
06.01 Fa :|-: Fb->(Fa/\Fb)
|Fa :assumption
```

<br>


*Example 2*.

This one is simply a version of the previous one, but where we have shifted the sole previous premise over to the antecedent of another conditional. Again, write it out first on paper. (The symbol $\top$ is "verum", and is just an abbreviation for a tautology, like falsum $\bot$ is an abbreviation for a contradiction. In this example, verum is just indicating that there are no premises).

```{.ProofChecker .GamutNDPlus submission="none" }
06.02  :|-: Fa->(Fb->(Fa/\Fb))
```

<br>


*Example 3*.

Again, like with all non-trivial proofs, write it out on paper first: premises go on top of page, conclusion on bottom. Try to (1) eliminate the main connectives of the premises, and after that turn to trying to (2) introduce the main connective of the conclusion. In general, alternating between strategies (1)-(2) as you go along is a good rule of thumb.

```{.ProofChecker .GamutNDPlus submission="none" }
06.03 Fa->Ga, Fa->Ha :|-: Fa->(Ga/\Ha)
|Fa->Ga :assumption
|Fa->Ha :assumption
```

<br>

*Example 4*.

This one is simply a version of the previous one, but where we have shifted the sole previous premise over to the antecedent of another conditional. Again, write it out first on paper.

```{.ProofChecker .GamutNDPlus submission="none" }
06.04 Fa->Ga, Fb->Gb :|-: Fa->(Fb->(Ga/\Gb))
|Fa->Ga :assumption
|Fb->Gb :assumption
```

<br>

*Example 5*.

This one has three boxes, each within the other. Again, write it out on paper first.

```{.ProofChecker .GamutNDPlus submission="none" }
06.05 Fa->Ga, Fc->((Ga/\Gb)->Hc) :|-: Fa->(Gb->(Fc->(Hc/\Fa)))
|Fa->Ga :assumption
|Fc->((Ga/\Gb)->Hc) :assumption
```

<br>

## Proofs with combinations of universals and conjunctions

<br>

*Problem 6*

This problem is good practice with the elimination rule for universals, together with the introduction rule for conjunction and the elimination rule for implication.

```{.ProofChecker .GamutNDPlus submission="none" }
06.06 AxFx, AxGx, Ax((Fx/\Gx)->Hx) :|-: Ha
|∀xFx :assumption
|∀xGx :assumption
|∀x((Fx ∧ Gx) → Hx) :assumption
```

<br>

*Problem 7*

On this problem, think about how to minimally expand your answer to the previous problem:

```{.ProofChecker .GamutNDPlus submission="none" }
06.07 AxFx, AxGx, Ax((Fx/\Gx)->Hx) :|-: AxHx
|∀xFx :assumption
|∀xGx :assumption
|∀x((Fx ∧ Gx) → Hx) :assumption
```

<br>

*Problem 8*

This problem is only tricky in that first you should think about how to get `Fa/\Gb` and then figure out how to turn this into a proof of `Gb/\Fa`.

```{.ProofChecker .GamutNDPlus submission="none" }
06.08 Rab, AxAy(Rxy->(Fx/\Gy)) :|-: Gb/\Fa
|Rab :assumption
|AxAy(Rxy->(Fx/\Gy)) :assumption
```

<br>

*Problem 9*

The intuition behind this problem should be clear: first go from `Rab` and the third premise to `Fa/\Gb` and then `Fa`; second go from `Rab` and the second premise to `Rba` and repeat the first step with the roles of `a,b` reversed to get `Ga`; and third put these two things together with conjunction introduction.

```{.ProofChecker .GamutNDPlus submission="none" }
06.09 Rab, AxAy(Rxy->Ryx), AxAy(Rxy->(Fx/\Gy)) :|-: Fa/\Ga
|Rab :assumption
|AxAy(Rxy->Ryx) :assumption
|AxAy(Rxy->(Fx/\Gy)) :assumption
```

<br>

*Problem 10*

This one is challenging only in that you need to "start from the bottom" and realize that to get `AyFy` you'll have to get `Fb` for some new constant `b`. Then work at the top of your proof to use the elimination rule for universal to get `Fb`.

```{.ProofChecker .GamutNDPlus submission="none" }
06.10 AxAy((Fx/\Rxy)->Fy), AyRay, Fa :|-: AyFy
|AxAy((Fx/\Rxy)->Fy) :assumption
|AyRay :assumption
|Fa :assumption
```

<br>

## Proofs with negations

<br>

*Example 11*.

This is just an elementary application of the elimination rule for negation.

```{.ProofChecker .GamutNDPlus submission="none" }
06.11 Fa, ~Fa  :|-: ⊥
|Fa :assumption
|~Fa :assumption
```

<br>


*Example 12*.

This one is just practice again with the elimination rule for negation, and the trick is just to "see" the two premises as the two premises of an application of this rule. That is, you have to "unsee" the conjunction and view the second premise as the negation of the first premise.

```{.ProofChecker .GamutNDPlus submission="none" }
06.12 (Fa/\Fb), ~(Fa/\Fb)  :|-: ⊥
|(Fa/\Fb) :assumption
|~(Fa/\Fb) :assumption
```

<br>

*Example 13*.

This one simply requires you to look at the premises and "find" the application of negation elimination.

```{.ProofChecker .GamutNDPlus submission="none" }
06.13 (Fa/\Fb)/\Fc, ~(Fa/\Fb)  :|-: ⊥
|(Fa/\Fb)/\Fc :assumption
|~(Fa/\Fb) :assumption
```

<br>

*Example 14*.

This one is an application of negation introduction. Again, negation introduction has the same general shape as arrow introduction. In this system "not $\phi$" is the same as "$\phi$ implies a contradiction".

```{.ProofChecker .GamutNDPlus submission="none" }
06.14 Fa->~Fb  :|-: ~(Fa/\Fb)
|Fa->~Fb :assumption
```

<br>

*Example 15*.

This one is a good example of negation elimination plus "first try applying elimination rules to the premises".

```{.ProofChecker .GamutNDPlus submission="none" }
06.15 Fa->~Fb, Fa, Fb  :|-: ⊥
|Fa->~Fb :assumption
|Fa :assumption
|Fb :assumption
```

<br>

## Proofs with nested arrows and universals and negations

<br>

*Problem 16*

On this problem, you need to work from the bottom and realize that to get the conclusion `AxFx->AxHx` you'll need to do an arrow introduction going from `AxFx` down to `AxHx` in a bracket. Then the proof should emulate the proof Barbara from lecture (it is [Example 7 under the introduction rule for universal](https://carnap.io/shared/logiclogiclogic/second-course-chapter-06-lesson-01-with-solutions.pandoc#introduction-rule-for-universal)).

```{.ProofChecker .GamutNDPlus submission="none" }
06.16 Ax(Fx->Gx), Ax(Gx->Hx) :|-: AxFx->AxHx
|Ax(Fx->Gx) :assumption
|Ax(Gx->Hx) :assumption
```

<br>

*Problem 17*

On this problem, you need to work from the bottom and realize that to get the conclusion `Ax(Gx->(Fx->Hx))` you will need to get `(Ga->(Fa->Ha))` for some new constant `a`. Then to get this, you'll have to work from the bottom and think about doing two arrow introductions to get this line. This will result in nested brackets.

```{.ProofChecker .GamutNDPlus submission="none" }
06.17 Ax(Fx->(Gx->Hx)) :|-: Ax(Gx->(Fx->Hx))
|Ax(Fx->(Gx->Hx)) :assumption
```

<br>

*Problem 18*


On this next problem, to pump intuition think of $Rxy$ as $x<y$ on numbers:

```{.ProofChecker .GamutNDPlus submission="none" }
06.18 AxAyAz((Rxy/\Ryz)->Rxz), Ax~Rxx :|-: Rab->~Rba
|AxAyAz((Rxy/\Ryz)->Rxz) :assumption
|Ax~Rxx :assumption
```



<br>

*Problem 19*

The following is a good example of nested brackets. This problem is closely related to an important building block of the lambda-calculus, namely the so-called S-combinator. The last line of this proof will be an introduction rule for universal, and so first try to get `(Fa->Ga)->(Fa->Ha)` for some constant symbol `a`. Trying to get `(Fa->Ga)->(Fa->Ha)` will involve a nested bracket. You'll introduce the middle arrow at the very end of your proof. The outer biggest bracket will end in `Fa->Ha`, and you'll have to use an inner bracket to go from `Fa` to `Ha`.

```{.ProofChecker .GamutNDPlus submission="none" }
06.19 Ax(Fx->(Gx->Hx)) :|-: Ax((Fx->Gx)->(Fx->Hx))
|Ax(Fx->(Gx->Hx)) :assumption
```

<br>

*Problem 20*

For this problem, just take your solution to Problem 10 and try to transform it, following the schema in the video which shows how to transform a proof of $\phi\rightarrow \psi$ into a proof of the contrapositive $\neg \psi\rightarrow \neg \phi$:

<video controls width="700" src="https://logic-teaching.github.io/pred/vid/contrapositive-transform.mp4"/> </video>

<br>

```{.ProofChecker .GamutNDPlus submission="none" }
06.20  AxAy((Fx/\Rxy)->Fy), AyRay, ~AyFy :|-: ~Fa
|AxAy((Fx/\Rxy)->Fy) :assumption
|AyRay :assumption
|~AyFy :assumption
```
