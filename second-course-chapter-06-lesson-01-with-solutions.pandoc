<br>
<br>

# Chapter 6, Lesson 1, Natural deduction, with solutions

We introduce a simple proof system for predicate logic, based on natural deduction. We focus on the universal quantifier, conjunction, the conditional, and negation.

- [Elimination rule for universal](#elimination-rule-for-universal)
- [Elimination rule for conjunction](#elimination-rule-for-conjunction)
- [Elimination rule for implication](#elimination-rule-for-implication)
- [The provability symbol](#the-provability-symbol)
- [Introduction rule for implication](#introduction-rule-for-implication)
- [Introduction rule for conjunction](#introduction-rule-for-conjunction)
- [Introduction rule universal](#introduction-rule-for-universal)
- [Elimination rule for negation](#elimination-rule-for-negation)
- [Introduction rule for negation](#introduction-rule-for-negation)

<br>

This version is just like the version we went over in lecture, except it has **the solutions** filled in.

<br>

## Elimination rule for universal

The rule is: if you have $\forall \; x \; \phi(x)$ on line $\ell_1$, then you can write $\phi(a)$ on any subsequent line $\ell$, where $\phi(a)$ results from $\phi(x)$ by replacing all instances of $x$ by $a$.

<video controls width="600" src="https://logic-teaching.github.io/philos-132-winter-23/vid/ND-EAredo-vid.mp4"/> </video>

<br>

Here are two simple examples of this rule:

*Example 1*

```{.ProofChecker .GamutNDPlus submission="none"}
 AxAy(Fx/\Gy) :|-: Fa/\Gb
|AxAy(Fx/\Gy) :assumption
|Ay(Fa/\Gy)            :EA1
|Fa/\Gb :EA2
```

*Example 2*

```{.ProofChecker .GamutNDPlus submission="none"}
 AxAyRxy :|-: Raa
|AxAyRxy :assumption
|AyRay            :EA1
|Raa :EA2
```

<br>

## Elimination rule for conjunction

The rule is: if you have $\phi \wedge \psi$ on line $\ell_1$, then you may write $\phi$ on any subsequent line $\ell>\ell_1$, and likewise you may write $\psi$ on any subsequent line $\ell>\ell_1$.

<video controls width="600" src="https://logic-teaching.github.io/prop/vid/natural_deduction_and_arrow_03_and_elim1.mp4"/> </video>
<video controls width="600" src="https://logic-teaching.github.io/prop/vid/natural_deduction_and_arrow_04_and_elim2.mp4"/> </video>
<br>

*Example 3*

```{.ProofChecker .GamutNDPlus submission="none"}
 AxFx/\(AxGx/\AxHx) :|-: Ga
|AxFx/\(AxGx/\AxHx) :assumption
|AxGx/\AxHx :E/\1
|AxGx :E/\2
|Ga :EA3
```

<br>

## Elimination rule for implication

The rule is: if you have $\phi$ on line $\ell_1$, and you have $\phi\rightarrow \psi$ on line $\ell_2$, then you may write $\psi$ on any subsequent line $\ell>\ell_1, \ell_2$.

<video controls width="600" src="https://logic-teaching.github.io/philos-132-winter-23/vid/ND-Earrow-vid.mp4"/> </video>
<br>

In the rule, it does not matter whether $\ell_1$ or $\ell_2$ comes first.

*Example 4*:

```{.ProofChecker .GamutNDPlus submission="none"}
 (Fa->Fb)/\(Fa->Fc), Fa :|-: Fb
|(Fa->Fb)/\(Fa->Fc) :assumption
|Fa :assumption
|Fa->Fb :E/\1
|Fb :E->2,3
```

<br>

## The provability symbol

The symbol $\vdash$ is the provability symbol. The expression $\phi_1, \ldots, \phi_n \vdash \phi$ means: there is a proof in the system we are learning whose premises are among $\phi_1, \ldots, \phi_n$ and whose conclusion is $\phi$.

In principle, the only way to establish $\phi_1, \ldots, \phi_n \vdash \phi$ is to produce a proof. But after you get lots of experience, you will be able in simple cases to tell just by looking at the premises and conclusion.

It turns out that $\phi_1, \ldots, \phi_n \vdash \phi$ iff $\phi_1, \ldots, \phi_n \vDash \phi$. The forward direction of this biconditional is called *soundness*, and the backwards direction of this biconditional is called *completeness*. We will return to this at various points. Soundness is easy to establish, while completeness is difficult to establish and is done in a more advanced course.

<br>

## Introduction rule for implication

The rule is: suppose that consecutive lines $\ell_1-\ell_n$ constitute a proof with premise $\phi$ and conclusion $\psi$. Then one may introduce $\phi\rightarrow \psi$ at line $\ell_n+1$, so long as one brackets off $\ell_1-\ell_n$ and never appeals to them again.

<video controls width="600" src="https://logic-teaching.github.io/prop/vid/natural_deduction_and_arrow_08_arrow_intro.mp4"/> </video>
<br>

The top line of a bracketed line is justified as an assumption, but really it is a temporary assumption: you are saying that if you temporarily assume $\phi$, then you can get to $\psi$, and that this is a good reason to write down $\phi\rightarrow \psi$.

We also use the expression of *open* and *closed* to describe when you are allowed to appeal to the top lines of brackets. Before finishing the bracket, the top line is called an *open* assumption and can be appealed to in order to justify other lines. But after finishing the bracket, the top line of the bracket is called a *closed* assumption and cannot be appealed to in order to justify other lines.

We extend this terminology to the ordinary premises, and sometimes say that the ordinary premises of the proof, usually enumerated at the top and justified as assumptions, are always open assumptions and are never closed.

*Example 5*

```{.ProofChecker .GamutNDPlus submission="none"}
 Fa->AyRay :|-: Fa->Rab
|Fa->AyRay :assumption
| Fa :assumption
| AyRay :E->1,2
| Rab :EA3
|Fa->Rab :I->2-4
```

Note that in the proof checker, to get the bracket one **inserts a space** before the formulas.

<br>

## Introduction rule for conjunction

The rule is: if you have $\phi$ on a line $\ell_1$, and you have $\psi$ on line $\ell_2$, then you may write $\phi \wedge \psi$ on any subsequent line $\ell> \ell_1, \ell_2$.

<video controls width="600" src="https://logic-teaching.github.io/prop/vid/natural_deduction_and_arrow_01_and_intro_v2.mp4"/> </video>
<br>

In the rule, it does not matter whether $\ell_1$ or $\ell_2$ comes first.

*Example 6*

```{.ProofChecker .GamutNDPlus submission="none"}
 Ax(Fx/\Gx) :|-: Ga/\Fa
|Ax(Fx/\Gx) :assumption
|Fa/\Ga :EA1
|Fa :E/\2
|Ga :E/\2
|Ga/\Fa :I/\3,4
```

<br>

## Introduction rule for universal

The rule is: if you have $\phi(a)$ on a line $\ell_1$, and if $a$ does not appear in any of the open assumptions, then you may write $\forall \; x \; \phi(x)$ on any subsequent line $\ell>\ell_1$.

<video controls width="600" src="https://logic-teaching.github.io/philos-132-winter-23/vid/ND-IA-vid.mp4"/> </video>

<br>

*Example 7 (Barbara)*:

```{.ProofChecker .GamutNDPlus submission="none"}
 Ax(Fx->Gx), Ax(Gx->Hx) :|-: Ax(Fx->Hx)
|Ax(Fx->Gx) :assumption
|Ax(Gx->Hx) :assumption
| Fb :assumption
| Fb->Gb :EA1
| Gb :E->3,4
| Gb->Hb :EA2
| Hb :E->5,6
|Fb->Hb :I->3-7
|Ax(Fx->Hx) :IA8
```

By contrast, the following proof does not work. The application of the introduction rule for universal at line 8 is flawed since the constant $b$ appears from line 7 appears in the open assumption in line 2. The proof checker describes this error as "b not being fresh".

```{.ProofChecker .GamutNDPlus submission="none"}
 Ax(Fx->Gx), Ax(Gx->Hx) :|-: Fb->AxHx
|Ax(Fx->Gx) :assumption
|Ax(Gx->Hx) :assumption
| Fb :assumption
| Fb->Gb :EA1
| Gb :E->3,4
| Gb->Hb :EA2
| Hb :E->5,6
| AxHx :IA7
|Fb->AxHx :I->3-8
```

Likewise, the following proof does not work. The application of the introduction rule for universal at line 8 is flawed since the the constant $b$ in line 7 appears in the open assumption at line 3:

```{.ProofChecker .GamutNDPlus submission="none"}
 Ax(Fx->Gx), Ax(Gx->Hx), Fb :|-: AxHx
|Ax(Fx->Gx) :assumption
|Ax(Gx->Hx) :assumption
|Fb :assumption
|Fb->Gb :EA1
|Gb :E->3,4
|Gb->Hb :EA2
|Hb :E->5,6
|AxHx :IA7
```


## Elimination rule for negation

To describe the introduction and elimination rules for negation, we need to introduce a special symbol. This symbol is ⊥ and is called falsum or bottom or bot. Intuitively, it’s a special symbol for a contradiction, something that’s always false. The falsum symbol ⊥ can be typed either by just cutting and pasting from this screen, or by typing `!?`.

Here is the elimination rule for negation: if you have $\phi$ on line $\ell_1$ and you have $\neg \phi$ on line $\ell_2$, then you may write $\bot$ on any subsequent line $\ell>\ell_1, \ell_2$.

<video controls width="700" src="https://logic-teaching.github.io/philos-132-winter-23/vid/ND-Erenegvid.mp4"/> </video>

<br>

*Example 8*.

```{.ProofChecker .GamutNDPlus submission="none"}
 AxFx, ~Fb :|-: ⊥
|AxFx :assumption
|~Fb :assumption
|Fb :EA1
|⊥ :E~2,3
```

<br>

## Introduction rule for negation

Here is the introduction rule for negation: suppose that consecutive lines $\ell_1-\ell_n$ constitute a bracketed proof with premise $\phi$ and conclusion $\bot$. Then one may introduce $\neg \phi$ at any subsequent line $\ell>\ell_n$.


Here is a picture of the rule:

<video controls width="700" src="https://logic-teaching.github.io/philos-132-winter-23/vid/ND-I~-vid.mp4"/> </video>

<br>

*Example 9*.

```{.ProofChecker .GamutNDPlus submission="none"}
 ~Rbb :|-: ~AxRxx
|~Rbb :assumption
| AxRxx :assumption
| Rbb :EA2
| ⊥ :E~1,3
|~AxRxx :I~2-4
```

<br>

These are lecture notes written by Sean Walsh. They are run on [carnap.io](http://www.carnap.io).[^3]

[^3]: which is:
