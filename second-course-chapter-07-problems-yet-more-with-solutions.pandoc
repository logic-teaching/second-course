<style>
table {
  border-collapse: collapse;
  width: 100%;
}

th, td {
  text-align: left;
  padding: 8px;
}

tr:nth-child(even) {background-color: #f2f2f2;}
</style>

<br>
<br>

# Chapter 7, More Practice Problems, with solutions

<br>

- [Practice with EFSQ](#practice-with-efsq)
- [Evaluating lambda terms](#evaluating-lambda-terms)
- [Inferring types](#inferring-types)
- [The Curry-Howard Isomorphism](#the-curry-howard-isomorphism)

<p style="page-break-before: always">

<br>

## Practice with EFSQ

<br>

*Problem 1*

This one is a very simple application of EFSQ.

```{.ProofChecker .GamutNDPlus submission="none" }
07.01 :|-: (Fa/\~Fa)->ExGx
| Fa/\~Fa :as
| Fa :E/\1
| ~Fa :E/\1
| !? :E~2,3
| ExGx :EFSQ 4
|(Fa/\~Fa)->ExGx :I->1-5
```

<br>

*Problem 2*

The following is a paradigmatic example of EFSQ. Before beginning, compare to *Example 7* from [Lecture 1](https://carnap.io/shared/logiclogiclogic/second-course-chapter-07-lesson-01-with-solutions.pandoc#bhk-and-efsq).

```{.ProofChecker .GamutNDPlus submission="none" }
07.02 Raa\/Rab, Ax~Rxx :|-: Rab
|Raa\/Rab :asssumption
|Ax~Rxx :assumption
| Raa :assumption
| ~Raa :EA2
| !? :E~3,4
| Rab :EFSQ5
|Raa->Rab :I->3-6
| Rab :assumption
| Rab :rep 8
|Rab->Rab :I->8-9
|Rab :E\/1,7,10
```

<br>

*Problem 3*

This problem is similar to the previous one.

```{.ProofChecker .GamutNDPlus submission="none" }
07.03 Ax(Fx\/Gx), Ax~Gx :|-: AxFx
|Ax(Fx\/Gx) :assumption
|Ax~Gx :assumption
|~Ga :EA2
|Fa\/Ga :EA1
| Fa :assumption
| Fa :rep5
|Fa->Fa :I->5-6
| Ga :assumption
| !? :E~3,8
| Fa :EFSQ9
|Ga->Fa :I->8-10
|Fa :E\/4,7,11
|AxFx :IA12
```

<br>

*Problem 4*

This one does not involve EFSQ but is a complement to the next problem, which does use EFSQ.

```{.ProofChecker .GamutNDPlus submission="none" }
07.04 ~(Fa->Fb) :|-: ~Fb
|~(Fa->Fb) :assumption
| Fb :assumption
|  Fa :assumption
|  Fb :rep2
| Fa->Fb :I->3-4
| !? :E~1,5
|~Fb :I~2-6
```

<br>

*Problem 5*

For this one, first set up the bracket from $\neg Fa$ to falsum. After that try to write $Fa\rightarrow Fb$ on a line. Use EFSQ to help you get from $Fa$ to $Fb$ via a falsum.

```{.ProofChecker .GamutNDPlus submission="none"}
07.05 ~(Fa->Fb) :|-: ~~Fa
|~(Fa->Fb) :assumption
| ~Fa :assumption
|  Fa :assumption
|  !? :E~2,3
|  Fb :EFSQ4
| Fa->Fb :I->3-5
| !? :E~1,6
|~~Fa :I~2-7
```

<br>

## Evaluating lambda terms

<br>

For the next three problems, we work with the following lambda terms, taking for granted a type $\mathbb{N}$ for the natural numbers and the familiar arithmetic operations on them.

- $L$ is $\lambda u:\mathbb{N} .\; u+5$
- $M$ is $\lambda v:\mathbb{N} .\; 7\cdot v$
- $N$ is $\lambda f: \mathbb{N}\rightarrow \mathbb{N}\;  \lambda w: \mathbb{N} .\; f(f(w))$

<br>

*Problem 6*

```{.QualitativeProblem .Numerical  submission="none" options="check"}
7.06 29 : Evaluate L3+M3
|29
```

We argue as follows:

- $L3 = (\lambda u:\mathbb{N} . u+5)3 = 3+5 = 8$.

- $M3 = (\lambda v:\mathbb{N} . 7\cdot v)3 = 7\cdot 3  = 21$.

- $L3+M3 = 8+21 = 29$

<br>

*Problem 7*

Reduce $NL$ to a term which contains only one lambda abstract.

```{.QualitativeProblem .MultipleChoice options="check" submission="none"}
7.7
|  λf : ℕ → ℕ, λw : ℕ. f(f(5))
|  λu : ℕ. f(f(u))
|+ λu : ℕ. u + 10
|  λf : ℕ → ℕ, λw : ℕ. 5(5(w))
```

One has

- $NL= (\lambda f: \mathbb{N}\rightarrow \mathbb{N}\;  \lambda w: \mathbb{N} .\; f(f(w))) (\lambda u:\mathbb{N} .\; u+5) = \lambda w: \mathbb{N} \; (\lambda u:\mathbb{N} .\; u+5)((\lambda u:\mathbb{N} .\; u+5)w) = \lambda w: \mathbb{N} \; (\lambda u:\mathbb{N} .\; u+5)(w+5) = \lambda w: \mathbb{N} \; w+5+5 = \lambda w: \mathbb{N} \; w+10$.

- Hence, intuitively $NL$ is "add 5 twice," which is the same as "add 10".

<br>

*Problem 8*

```{.QualitativeProblem .Numerical  submission="none" options="check"}
7.08 160 : Evaluate (NL)(3)+(NM)(3)
|160
```

- $L$ is add 5, and $N$ is "do it twice," and so NL is "add 5 twice," which is the same as "add 10".

- $(NL)(3) = 3+ 10 = 13$

- $M$ is multiply by 7, and $N$ is "do it twice," and so NL is "multiply by 7 twice," which is the same as "multiply by 49".

- $(ML)(3) = 49*3 = 147$

- $(NL)(3)+(NM)(3) = 13+147=160$

<br>

## Inferring types

<br>

*Problem 9*

```{.QualitativeProblem .MultipleChoice options="check" submission="none"}
7.09 What is the type of λu : ℤ . |u| ?
| ℕ->ℕ
| ℚ->ℕ
| ℤ->ℤ
|+ ℤ->ℕ
```

This is because λu : ℤ . |u| denotes the function which on input u from ℤ outputs the element |u|, and when u is an integer, we know that |u| is a natural number.

<br>

*Problem 10*

```{.QualitativeProblem .MultipleChoice options="check" submission="none"}
7.10 What is the type of λu : ℤ  λv : ℚ . v-u ?
| ℚ->(ℤ->ℚ)
|+ ℤ->(ℚ->ℚ)
| ℚ->(ℤ->ℤ)
| (ℤ->ℚ)->ℚ
```

This is because λv : ℚ . v-u is the function which on input v from ℚ outputs v-u, which is also in ℚ when u is. Hence λv : ℚ . v-u has type ℚ->ℚ. Thus λu : ℤ  λv : ℚ . v-u denotes the function which on input u from ℤ outputs λv : ℚ . v-u, which has type ℚ->ℚ. Hence, its input is of type ℤ, and its output is of type ℚ->ℚ.

<br>

*Problem 11*

```{.QualitativeProblem .MultipleChoice options="check" submission="none"}
7.11 What is the type of λf : ℤ->ℚ . f(-5) ?
| ℚ->(ℤ->ℚ)
| ℤ->(ℚ->ℚ)
| ℚ->(ℤ->ℤ)
|+ (ℤ->ℚ)->ℚ
```

This is because λf : ℤ->ℚ . f(-5) denotes the function which on input of a function f:ℤ->ℚ evaluates f on input -5, and this results in a rational ℚ. Hence, its input is of type ℤ->ℚ, and its output is of type ℚ.

<br>

## The Curry-Howard Isomorphism

<br>

The following problem further illustrates the Curry-Howard Isomorphism.

<br>

*Problem 12*

Find a proof of the following tautology of intuitionistic propositional logic.

```{.ProofChecker .GamutMPND submission="none"}
07.12 :|-: (q->r)->((p->q)->(p->r))
| q->r :as
|  p->q :as
|   p :as
|   q :E->2,3
|   r :E->1,4
|  p->r :I->3-5
| (p->q)->(p->r) :I->2-6
|(q->r)->((p->q)->(p->r)) :I->1-7
```

<br>

*Problem 13*

<br>

If you decorate your answer to Problem 18 with proof terms using variables $f,g,u$ (in that order), what proof term do you get for the last line?

```{.QualitativeProblem .MultipleChoice options="check" submission="none"}
7.13
| λf : p->q, λg : q->r, λu : p . f(g(u))
| λf : q->r, λu : p, λg : p->q . g(f(u))
|+ λf : q->r, λg : p->q, λu : p . f(g(u))
| λf : q->r, λu : p, λg : p->q . g(f(u))
```

Here is a solution which shows how to do it:

 <img src="https://logic-teaching.github.io/philos-132-winter-23/texts/decorated-proof.png" alt="Decorated proof" width="500"/>


<br>

*Problem 14*

<br>

In [Chapter 4 when we were talking about functions](https://carnap.io/shared/logiclogiclogic/second-course-chapter-04-lesson-01.pandoc#graphs-of-functions-and-predicate-logic), we often visually depicted their graphs. Consider the function $f:\{4,5,6\}\rightarrow \{7,8,9\}$ depicted in blue, and the function $g:\{1,2,3\}\rightarrow \{4,5,6\}$ depicted in green. Let $h:\{1,2,3\}\rightarrow \{7,8,9\}$ given by $g$ followed by $f$. The function $h$ is usually called the composition of $f$ and $g$. How would you describe $h$ in the terminology of lambda-terms? (By so doing, you are showing how compositions can be described in terms of the lambda-calculus).

 <img src="https://logic-teaching.github.io/philos-132-winter-23/texts/simple-composition-diagram.png" alt="Simple composition diagram" width="500"/>

```{.QualitativeProblem .MultipleChoice options="check" submission="none"}
7.14
| h = λu : {1,2,3} . g(f(u))
|+ h = λu : {1,2,3} . f(g(u))
| h = λu : {1,2,3} . (f(u))(g(u))
| h = λu : {1,2,3} . (f(g))(f(u))
```

<br>

*Problem 15*

Consider the following proof. It is inefficient in a lot of ways, and you could have solved it faster with the repeat rule. Further, it has many "extra" elimination rules in it. You don't need to do anything with the proof-- just read it and move on to the next part.

```{.ProofChecker .GamutMPND submission="none"}
07.15.1 :|-: (p->p)->(p->p)
| p->p :as
|  p :as
|  p :E->1,2
|  p :E->1,3
|  p :E->1,4
| p->p :I->2-5
|(p->p)->(p->p) :I->1-6
```

Now decorate it with proof-terms, and see what proof-term you get for the final line:

```{.QualitativeProblem .MultipleChoice options="check" submission="none"}
7.15.2
| λf:p->p λu:p . f(u)
| λf:p->p λu:p . f(f(u))
|+ λf:p->p λu:p . f(f(f(u)))
| λf:p->p λu:p . f(f(f(f(u))))
```

(Side note: this was Church's way of encoding natural numbers as lambda terms. This term is the lambda term for 3. It corresponds to the three applications of arrow elimination in our proof).

Here is a solution which shows how to do it:

 <img src="https://logic-teaching.github.io/philos-132-winter-23/texts/decorated-proof-2.png" alt="Decorated proof" width="500"/>