<style>
table {
  border-collapse: collapse;
  width: 100%;
}

th, td {
  text-align: left;
  padding: 8px;
}

tr:nth-child(even) {background-color: #f2f2f2;}
</style>

<br>
<br>

# Chapter 7, More Practice Problems

<br>

- [Practice with EFSQ](#practice-with-efsq)
- [Evaluating lambda terms](#evaluating-lambda-terms)
- [Inferring types](#inferring-types)
- [The Curry-Howard Isomorphism](#the-curry-howard-isomorphism)

<p style="page-break-before: always">

<br>

## Practice with EFSQ

<br>

*Problem 1*

This one is a very simple application of EFSQ.

```{.ProofChecker .GamutNDPlus submission="none" }
07.01 :|-: (Fa/\~Fa)->ExGx
```

<br>

*Problem 2*

The following is a paradigmatic example of EFSQ. Before beginning, compare to *Example 7* from [Lesson 1](https://carnap.io/shared/logiclogiclogic/second-course-chapter-07-lesson-01-with-solutions.pandoc#bhk-and-efsq).

```{.ProofChecker .GamutNDPlus submission="none" }
07.02 Raa\/Rab, Ax~Rxx :|-: Rab
|Raa\/Rab :asssumption
|Ax~Rxx :assumption
```

<br>

*Problem 3*

This problem is similar to the previous one.

```{.ProofChecker .GamutNDPlus submission="none" }
07.03 Ax(Fx\/Gx), Ax~Gx :|-: AxFx
|Ax(Fx\/Gx) :assumption
|Ax~Gx :assumption
```

<br>

*Problem 4*

This one does not involve EFSQ but is a complement to the next problem, which does use EFSQ.

```{.ProofChecker .GamutNDPlus submission="none" }
07.04 ~(Fa->Fb) :|-: ~Fb
|~(Fa->Fb) :assumption
```

<br>

*Problem 5*

For this one, first set up the bracket from $\neg Fa$ to falsum. After that try to write $Fa\rightarrow Fb$ on a line. Use EFSQ to help you get from $Fa$ to $Fb$ via a falsum.

```{.ProofChecker .GamutNDPlus submission="none"}
07.05 ~(Fa->Fb) :|-: ~~Fa
|~(Fa->Fb) :assumption
```

<br>

## Evaluating lambda terms

<br>

For the next three problems, we work with the following lambda terms, taking for granted a type $\mathbb{N}$ for the natural numbers and the familiar arithmetic operations on them.

- $L$ is $\lambda u:\mathbb{N} .\; u+5$
- $M$ is $\lambda v:\mathbb{N} .\; 7\cdot v$
- $N$ is $\lambda f: \mathbb{N}\rightarrow \mathbb{N}\;  \lambda w: \mathbb{N} .\; f(f(w))$

<br>

*Problem 6*

```{.QualitativeProblem .Numerical  submission="none" options="check"}
7.06 29 : Evaluate L3+M3
|
```

<br>

*Problem 7*

Reduce $NL$ to a term which contains only one lambda abstract.

```{.QualitativeProblem .MultipleChoice options="check" submission="none"}
7.07
|  λf : ℕ → ℕ, λw : ℕ. f(f(5))
|  λu : ℕ. f(f(u))
|* λu : ℕ. u + 10
|  λf : ℕ → ℕ, λw : ℕ. 5(5(w))
```

<br>

*Problem 8*

```{.QualitativeProblem .Numerical  submission="none" options="check"}
7.08 160 : Evaluate (NL)(3)+(NM)(3)
|
```

<br>

## Inferring types

<br>

*Problem 9*

```{.QualitativeProblem .MultipleChoice options="check" submission="none"}
7.09 What is the type of λu : ℤ . |u| ?
| ℕ->ℕ
| ℚ->ℕ
| ℤ->ℤ
|* ℤ->ℕ
```

<br>

*Problem 10*

```{.QualitativeProblem .MultipleChoice options="check" submission="none"}
7.10 What is the type of λu : ℤ  λv : ℚ . v-u ?
| ℚ->(ℤ->ℚ)
|* ℤ->(ℚ->ℚ)
| ℚ->(ℤ->ℤ)
| (ℤ->ℚ)->ℚ
```

<br>

*Problem 11*

```{.QualitativeProblem .MultipleChoice options="check" submission="none"}
7.11 What is the type of λf : ℤ->ℚ . f(-5) ?
| ℚ->(ℤ->ℚ)
| ℤ->(ℚ->ℚ)
| ℚ->(ℤ->ℤ)
|* (ℤ->ℚ)->ℚ
```

<br>

## The Curry-Howard Isomorphism

<br>

The following problem further illustrates the Curry-Howard Isomorphism.

<br>

*Problem 12*

Find a proof of the following tautology of intuitionistic propositional logic.

```{.ProofChecker .GamutMPND submission="none"}
07.12 :|-: (q->r)->((p->q)->(p->r))
```

<br>

*Problem 13*

<br>

If you decorate your answer to Problem 18 with proof terms using variables $f,g,u$ (in that order), what proof term do you get for the last line?

```{.QualitativeProblem .MultipleChoice options="check" submission="none"}
7.13
| λf : p->q, λg : q->r, λu : p . f(g(u))
| λf : q->r, λu : p, λg : p->q . g(f(u))
|* λf : q->r, λg : p->q, λu : p . f(g(u))
| λf : q->r, λu : p, λg : p->q . g(f(u))
```

<br>

*Problem 14*

<br>

In [Chapter 4 when we were talking about functions](https://carnap.io/shared/logiclogiclogic/second-course-chapter-04-lesson-01.pandoc#graphs-of-functions-and-predicate-logic), we often visually depicted their graphs. Consider the function $f:\{4,5,6\}\rightarrow \{7,8,9\}$ depicted in blue, and the function $g:\{1,2,3\}\rightarrow \{4,5,6\}$ depicted in green. Let $h:\{1,2,3\}\rightarrow \{7,8,9\}$ given by $g$ followed by $f$. The function $h$ is usually called the composition of $f$ and $g$. How would you describe $h$ in the terminology of lambda-terms? (By so doing, you are showing how compositions can be described in terms of the lambda-calculus).

 <img src="https://logic-teaching.github.io/philos-132-winter-23/texts/simple-composition-diagram.png" alt="Simple composition diagram" width="500"/>

```{.QualitativeProblem .MultipleChoice options="check" submission="none"}
7.14
| h = λu : {1,2,3} . g(f(u))
|* h = λu : {1,2,3} . f(g(u))
| h = λu : {1,2,3} . (f(u))(g(u))
| h = λu : {1,2,3} . (f(g))(f(u))
```

<br>

*Problem 15*

Consider the following proof. It is inefficient in a lot of ways, and you could have solved it faster with the repeat rule. Further, it has many "extra" elimination rules in it. You don't need to do anything with the proof-- just read it and move on to the next part.

```{.ProofChecker .GamutMPND submission="none"}
07.15.1 :|-: (p->p)->(p->p)
| p->p :as
|  p :as
|  p :E->1,2
|  p :E->1,3
|  p :E->1,4
| p->p :I->2-5
|(p->p)->(p->p) :I->1-6
```

Now decorate it with proof-terms, and see what proof-term you get for the final line:

```{.QualitativeProblem .MultipleChoice options="check" submission="none"}
7.15.2
| λf:p->p λu:p . f(u)
| λf:p->p λu:p . f(f(u))
|* λf:p->p λu:p . f(f(f(u)))
| λf:p->p λu:p . f(f(f(f(u))))
```

(Side note: this was Church's way of encoding natural numbers as lambda terms).